#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require "rubygems"
require File.expand_path("../../lib/dummy_calendar", __FILE__)

DB_PATH = File.expand_path("../../patterns", __FILE__)

def print_events(name, dates)
  dates.each do |date|
    puts name + ', ' + date.strftime("%Y/%m/%d")
  end
end

def generate(name, dstart, dend)
  dc = DummyCalendar::Generator.new
  range = dstart..dend
  start_year = dstart.year
  end_year = dend.year

  filenames = Dir.glob("#{DB_PATH}/*").map{|path| path.split('/').last}
  if filenames.include?(name)
    eval File.read "#{DB_PATH}/#{name}"
  else
    return nil
  end

  return dc.generate(dstart, range)
end

###############################################################

unless ARGV[0] && ARGV[1] && ARGV[2]
  puts "ERROR: Invalid argument"
  puts "Please input, for example, `./bin/generate_dummy 001_gn_meeting 20150401 20160330`"
  exit -1
end

begin
  dstart = Date.parse(ARGV[1])
  dend   = Date.parse(ARGV[2])
  raise if dstart >= dend
rescue
  puts "ERROR: Invalid date"
  exit -1
end

unless result = generate(ARGV[0], dstart, dend)
  puts "ERROR: Recurrence name `" + ARGV[0] + "` not found"
  puts "Please select name in /patterns/*"
  exit -1
end

puts result
# print_events('dummy_' + ARGV[0], dates)
