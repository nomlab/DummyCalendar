#!/usr/bin/env ruby
# coding: utf-8

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require "rubygems"
require "thor"
require "json"
require File.expand_path("../../lib/dummy_calendar", __FILE__)

class ParrotCLI < Thor
  package_name 'Parrot'
  default_command :help

  DB_PATH = File.expand_path("../../generated/patterns", __FILE__)

  ################################################################
  # command name mappings
  map ["--help", "-h"] => :help
  map ["--generate", "-g"] => :generate


  ################################################################
  # Command: help
  ################################################################
  desc "help [COMMAND]", "Describe available commands or one specific command."
  def help(command = nil)
    super(command)
  end

  ################################################################
  # Command: list
  ################################################################
  desc "list", "Show pattern names list."
  def list
    filenames = pattern_names
    filenames.each do |filename|
      puts filename
    end
  end

  ################################################################
  # Command: generate
  ################################################################
  desc "generate", "Generate dummy events."

  method_option :name, :required => true, :desc => 'pattern name or `all`'
  # method_option :range, :required => true, :banner => 'FROM-TO', :desc => 'YYYYMMDD-YYYYMMDD'
  method_option :format, :default => 'csv', :desc => '`csv`, `ics`, or `json`'
  # method_option :max_time, :default => 360

  def generate
    # dstart, dend = options[:range].split('-')
    # begin
    #   dstart = Date.parse(dstart)
    #   dend   = Date.parse(dend)
    #   raise if dstart >= dend
    # rescue
    #   puts "ERROR: Invalid date"
    #   exit -1
    # end

    # @cal = DummyCalendar::Calendar.new
    # event_next = {}
    # max_time = options[:max_time].to_i
    # orig_range = dstart..dend
    # dstart -= 365

    if options[:name] == 'all'
      patterns = pattern_names
      patterns.each do |pattern|
        events = generate_dummy_events(pattern, dstart, dend, pattern, max_time)
        @cal.add_events(events, orig_range)
      end
    elsif options[:name] == 'group'
      $overlap_count = 0
      event_next = {}
      config = File.expand_path("../../config.yml", __FILE__)
      conf = YAML.load_file(config)
      dstart, dend = conf["RANGE"].split('-')
      begin
        $dstart = Date.parse(dstart)
        $dend   = Date.parse(dend)
        raise if dstart >= dend
      rescue
        puts "ERROR: Invalid date"
        exit -1
      end
      st, et = conf["WORKING_HOURS"].split('-')
      $max_time = (et.split(':')[0].to_i - st.split(':')[0].to_i)*60 + et.split(':')[1].to_i - st.split(':')[1].to_i
      $orig_range = $dstart..$dend
      $dstart -= 400

      # Initialize calendars, users, and events
      # When create event, set next date of generating
      $cals = init_calendar(conf["CALENDARS"])
      $users = init_user(conf["USERS"])
      conf["RECURRENCE"].each do |recurrence|
        de = Parrot::Event.new(recurrence, $cals[recurrence["CALENDAR"]])
        event_next[de] = de.next_generate_date
      end

      # Check each date of generating range
      # If checked next date of generating, generate next occurrence
      $now = $dstart
      while $dend - $now > 0
        puts $now if ($now.day % 10) == 1
        event_next.each do |event, date|
          if $now - date == 0
            event.generate_occurrence
            event_next[event] = event.next_generate_date
          end
        end
        $now += 1
      end
    else
      options[:name].split(',').each do |name|
        unless events = generate_dummy_events(name, dstart, dend, name)
          puts "ERROR: Recurrence options[:name] `" + name + "` not found"
          puts "Please select options[:name] in /patterns/*"
          exit -1
        end
        @cal.add_events(events)
      end
    end

    case options[:format]
    when 'csv' then $cals.print_events
    when 'ics' then
      if options[:name] == 'group'
        $cals.each do |name, calendar|
          puts name
          f = File.open(DB_PATH+"/../#{name}.ics", 'w')
          f.write calendar.to_ics
          f.close
        end
      else
        puts @cal.to_ics
      end
    when 'json' then
      $cals.each do |name, calendar|
        puts name
          f = File.open(DB_PATH+"/../../full-calendar/#{name}.json", 'w')
          f.write calendar.to_json
          f.close
      end
    end
  end

  private

  def generate_dummy_events(name, dstart, dend, recurrence_tag, max_time, cals)
    dc = Parrot::EventGenerator.new(recurrence_tag)
    range = dstart..dend
    start_year = dstart.year
    end_year = dend.year

    filenames = Dir.glob("#{DB_PATH}/recurrence/*").map{|path| path.split('/').last}
    if filenames.include?(name)
      eval File.read "#{DB_PATH}/recurrence/#{name}"
    else
      return nil
    end

    return dc.generate(dstart, range, max_time, cals)
  end

  def pattern_names
    filenames = Dir.glob("#{DB_PATH}/recurrence/*").map{|path| path.split('/').last}
  end

  def init_calendar(cals)
    cal_list = {}
    cals.each do |cal|
      dc = Parrot::Calendar.new(cal["NAME"], cal["PARTICIPANT_BORDER"], cal["RANDOM_EVENTS_PER_MONTH"])
      cal_list[dc.name] = dc
    end
    return cal_list
  end

  def init_user(users)
    user_list = {}
    users.each do |name, hash|
      calendars = {}
      hash.each do |name, val|
        calendars[$cals[name]] = val
      end
      du = Parrot::User.new(name, calendars)
      user_list[du.name] = du
      hash.each do |name ,val|
        $cals[name].add_user(du)
      end
    end
    return user_list
  end
end

command = ParrotCLI.start(ARGV)
