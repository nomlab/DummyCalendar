#!/usr/bin/env ruby
# coding: utf-8

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require "rubygems"
require 'yaml'
require 'date'
require 'icalendar'
require 'json'

def generate(dstart, cal_name, recurrence)
  content = ""
  content << set_cal_name(cal_name)
  content << set_start_date(recurrence, dstart)
  content << set_summary(recurrence["SUMMARY"]) if recurrence["SUMMARY"]
  content << set_interval(recurrence["INTERVAL"]) if recurrence["INTERVAL"]
  content << set_during(recurrence["DURING"]) if recurrence["DURING"]
  content << set_timing(recurrence["TIMING"]) if recurrence["TIMING"]
  content << set_wday(recurrence["WDAY"]) if recurrence["WDAY"]
  content << set_holiday(recurrence["HOLIDAY"]) if recurrence["HOLIDAY"] != nil
  content << set_monthweek(recurrence["MONTHWEEK"]) if recurrence["MONTHWEEK"]
  content << set_month(recurrence["MONTH"]) if recurrence["MONTH"]
  content << set_date(recurrence["DATE"]) if recurrence["DATE"]
  content << set_vacation_term(recurrence["VACATION_TERM"], dstart) if recurrence["VACATION_TERM"]
  content << set_other_events(recurrence["OTHER_EVENTS"]) if recurrence["OTHER_EVENTS"] != nil
  content << set_order(recurrence["ORDER"]) if recurrence["ORDER"]
  content << set_deadline(recurrence["DEADLINE"]) if recurrence["DEADLINE"]

  case recurrence["TIMING"]
  when 'bulk'
    p_timing = '1'
  when 'successively'
    p_timing = '2'
  end
  case recurrence["INTERVAL"]
  when 365
    p_interval = '1'
  when 183
    p_interval = '2'
  when 120
    p_interval = '3'
  when 60
    p_interval = '4'
  when 30
    p_interval = '5'
  when 14
    p_interval = '6'
  when 7
    p_interval = '7'
  end
  priority = p_timing + p_interval
  f = File.open(@path + "/recurrence" + "/#{priority}_#{format("%03d", @pattern_num)}", 'w')
  f.write(content)
  f.close
  @pattern_num += 1
end

def set_cal_name(name)
  return "dc.set_cal_name('#{name}')\n"
end

def set_start_date(recurrence, dstart)
  start_date = ""
  if recurrence["DATE"]
    month, date = recurrence["DATE"][0].split('/')
    start_date = format("%02d-%02d", month.to_i, date.to_i)
  elsif recurrence["MONTHWEEK"]
    month, week = recurrence["MONTHWEEK"][0].split('-')
    start_date = format("%02d-%02d", month.to_i, (week.to_i-1)*7+@random.rand(1..7))
  elsif recurrence["MONTH"]
    month = recurrence["MONTH"][0]
    if month.to_i == 2
      start_date = format("%02d-%02d", month.to_i, @random.rand(1..28))
    else
      start_date = format("%02d-%02d", month.to_i, @random.rand(1..30))
    end
  else
    start_date = (dstart + @random.rand(0..13)).strftime("%m-%d")
  end
  return 'dstart = Date.parse("#{start_year}-' + start_date + '")' + "\n"
end

def set_summary(summary)
  return "dc.set_summary_rule('#{summary}', :no_makeup)\n"
end

def set_interval(interval)
  if interval.to_i < 14
    range = 3
  elsif interval.to_i < 120
    range = 7
  else
    range = 15
  end
  return "dc.set_interval({:n => #{interval}, :range => -#{range}..#{range}}, 2)\n"
end

def set_during(during)
  return "dc.set_during(#{during})\n"
end

def set_timing(timing)
  return "dc.set_timing('#{timing}')\n"
end

def set_wday(wday)
  content = ""
  wday.each do |w|
    content << "dc.add_param(:wday, {:wday => :#{w}, :flag => true}, 1)\n"
  end
  return content
end

def set_holiday(holiday)
  return "dc.add_param(:holiday, {:flag => #{holiday}}, 5)\n"
end

def set_monthweek(monthweek)
  content = ""
  monthweek.each do |mw|
    month, week = mw.split('-')
    content << "dc.add_param(:monthweek, {:month => #{month}, :week => #{week}, :flag => true}, 1)\n"
  end
  return content
end

def set_month(month)
  content = ""
  month.each do |m|
    content << "dc.add_param(:month, {:month => #{m}, :flag => true}, 1)\n"
  end
  return content
end

def set_date(date)
  content = ""
  date.each do |d|
    month, day = d.split('/')
    content << "dc.add_param(:date, {:month => #{month}, :day => #{day}, :flag => true}, 1)\n"
  end
  return content
end

def set_vacation_term(vacation_term, dstart)
  content = "(start_year..end_year).each do |year|\n"
  vacation_term.each do |term|
    first, last = term.split('-')
    st = Date.new(dstart.year, first.split('/')[0].to_i, first.split('/')[1].to_i)
    en = Date.new(dstart.year, last.split('/')[0].to_i, last.split('/')[1].to_i)
    if st < en
      content << '  dc.add_param(:vacation_term, {:dstart => Date.parse("#{year}-' + st.strftime("%m-%d") + '"), :dend => Date.parse("#{year}-' + en.strftime("%m-%d") + '")}, 5)'+"\n"
    else # dendの方が日付が若い場合，dendを1年延ばす．
      content << '  dc.add_param(:vacation_term, {:dstart => Date.parse("#{year}-' + st.strftime("%m-%d") + '"), :dend => Date.parse("#{year + 1}-' + en.strftime("%m-%d") + '")}, 5)'+"\n"
    end
  end
  content << "end\n"
  return content
end

def set_other_events(other_events)
  if other_events
    return "dc.add_param(:other_events, {:n => 50, :seed => 999999}, 5)\n"
  end
end

def set_order(order)
  content = "(start_year..end_year).each do |year|\n"
  if order["AFTER"]
    order["AFTER"].each do |date|
      month, day = date.split('/')
      content << '  dc.add_param(:order, {:date => Date.parse("#{year}-' + format("%02d-%02d", month, day) + '"), :direction => :after}, 1)'+"\n"
    end
  end
  if order["SIMULTANEOUS"]
    order["SIMULTANEOUS"].each do |date|
      month, day = date.split('/')
      content << '  dc.add_param(:order, {:date => Date.parse("#{year}-' + format("%02d-%02d", month, day) + '"), :direction => :simultaneous}, 1)'+"\n"
    end
  end
  if order["BEFORE"]
    order["BEFORE"].each do |date|
      month, day = date.split('/')
      content << '  dc.add_param(:order, {:date => Date.parse("#{year}-' + format("%02d-%02d", month, day) + '"), :direction => :before}, 1)'+"\n"
    end
  end
  content << "end\n"
  return content
end

def set_deadline(deadline)
  content = "(start_year..end_year).each do |year|\n"
  deadline.each do |dl|
    month, day = dl.split('/')
    content << '  dc.add_param(:deadline, {:date => Date.parse("#{year}-' + format("%02d-%02d", month, day) + '")}, 1)' + "\n"
  end
  content << "end\n"
  return content
end

config = File.expand_path("../../config.yml", __FILE__)
conf = YAML.load_file(config)
dstart, dend = conf["RANGE"].split('-')
begin
  dstart = Date.parse(dstart)
  dend   = Date.parse(dend)
  raise if dstart >= dend
rescue
  puts "ERROR: Invalid date"
  exit -1
end

seed = 1111
@random = Random.new(seed)
@path = File.expand_path("../../generated/patterns", __FILE__)
@pattern_num = 1
cal_list = {}
conf["CALENDARS"].each do |cal|
  cal_list[cal["NAME"]] = {}
  cal_list[cal["NAME"]]["CAL"] = {}
  cal_list[cal["NAME"]]["USER"] = cal["USER"]
  cal["RECURRENCE"].each do |recurrence|
    generate(dstart, cal["NAME"], recurrence)
  end
end
f = File.open(@path + "/cal_list", 'w')
f.write(cal_list.to_json)
f.close
